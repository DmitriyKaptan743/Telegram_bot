import os
import telebot
import firebase_admin
from firebase_admin import credentials, db
from flask import Flask, request
import logging
import random
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∑ Environment Variables
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    logger.error("API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    exit(1)

bot = telebot.TeleBot(API_TOKEN)

# Firebase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø–æ–º–∏–ª–æ–∫
try:
    if not firebase_admin._apps:
        cred = credentials.Certificate("telegram-c480f-firebase-adminsdk-fbsvc-71cde196d0.json")
        firebase_admin.initialize_app(cred, {
            'databaseURL': 'https://telegram-c480f-default-rtdb.firebaseio.com/'
        })
        logger.info("Firebase —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    else:
        logger.info("Firebase –≤–∂–µ –±—É–ª–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Firebase: {e}")
    firebase_admin = None

# Flask –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app = Flask(__name__)

REWARD_THRESHOLDS = {
    10: "ü•â –ë—Ä–æ–Ω–∑–æ–≤–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞!",
    25: "ü•à –°—Ä—ñ–±–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞!",
    50: "ü•á –ó–æ–ª–æ—Ç–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞!",
    100: "üèÜ –ü–ª–∞—Ç–∏–Ω–æ–≤–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞!"
}

def add_points(user_id, username, points_to_add):
    """–î–æ–¥–∞—î –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    try:
        if not firebase_admin or not firebase_admin._apps:
            logger.warning("Firebase –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
            return points_to_add

        ref = db.reference(f'users/{user_id}')
        user_data = ref.get()
        if user_data:
            new_points = user_data.get('points', 0) + points_to_add
            ref.update({'points': new_points, 'username': username})
        else:
            new_points = points_to_add
            ref.set({'username': username, 'points': new_points})

        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} ({user_id}) –æ—Ç—Ä–∏–º–∞–≤ {points_to_add} –±–∞–ª—ñ–≤. –ó–∞–≥–∞–ª–æ–º: {new_points}")
        return new_points
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–∞–ª—ñ–≤: {e}")
        return points_to_add

def get_user_points(user_id):
    """–û—Ç—Ä–∏–º—É—î –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        if not firebase_admin or not firebase_admin._apps:
            logger.warning("Firebase –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return 0

        ref = db.reference(f'users/{user_id}')
        user_data = ref.get()
        points = user_data.get('points', 0) if user_data else 0
        return points
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª—ñ–≤: {e}")
        return 0

def check_rewards(points):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞—Å–ª—É–≥–æ–≤—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥—É"""
    rewards = []
    for threshold, reward in REWARD_THRESHOLDS.items():
        if points == threshold:
            rewards.append(reward)
    return rewards

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        welcome_text = ("–í—ñ—Ç–∞—é! ü§ñ\n\n"
                        "–ù–∞–ø–∏—à–∏ '–ü—Ä–∏–≤—ñ—Ç' —ñ –æ—Ç—Ä–∏–º—É–π –±–∞–ª–∏.\n"
                        "–ü–µ—Ä–µ–≤—ñ—Ä –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥–æ—é /score.\n\n"
                        "–£–¥–∞—á—ñ! üçÄ")
        bot.reply_to(message, welcome_text)
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_welcome: {e}")
        try:
            bot.reply_to(message, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ —è –ø—Ä–∞—Ü—é—é! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except Exception as ex:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É")

@bot.message_handler(commands=['score'])
def send_score(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /score"""
    try:
        user_id = message.from_user.id
        logger.info(f"–ó–∞–ø–∏—Ç –±–∞–ª–∞–Ω—Å—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

        points = get_user_points(user_id)
        username = message.from_user.username or message.from_user.first_name

        score_text = f"üë§ {username}\nüí∞ –£ –≤–∞—Å {points} –±–∞–ª—ñ–≤."
        bot.reply_to(message, score_text)
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {points} –±–∞–ª—ñ–≤")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_score: {e}")
        try:
            bot.reply_to(message, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        except Exception as ex:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É")

@bot.message_handler(func=lambda message: True, content_types=['text'])
def count_hello(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        text = message.text if message.text else ""
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} ({user_id}): {text[:50]}...")

        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–ª–æ–≤–∞ "–ø—Ä–∏–≤—ñ—Ç" (—Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏)
        text_lower = text.lower()
        greetings = ["–ø—Ä–∏–≤—ñ—Ç", "–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "hey"]
        count = 0
        for greeting in greetings:
            count += text_lower.count(greeting)

        if count > 0:
            points = add_points(user_id, username, count)
            rewards = check_rewards(points)

            reply = f"üéâ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {count} –±–∞–ª(—ñ–≤)!\nüí∞ –ó–∞–≥–∞–ª–æ–º —É –≤–∞—Å {points} –±–∞–ª—ñ–≤."

            if rewards:
                reply += "\n\nüèÖ " + "\nüèÖ ".join(rewards)

            bot.reply_to(message, reply)
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} –æ—Ç—Ä–∏–º–∞–≤ {count} –±–∞–ª—ñ–≤")
        else:
            responses = [
                "–¶—ñ–∫–∞–≤–æ! –ù–∞–ø–∏—à—ñ—Ç—å '–ü—Ä–∏–≤—ñ—Ç', —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∏! üòä",
                "–Ø —Ä–æ–∑—É–º—ñ—é! –ê–ª–µ –±–∞–ª–∏ –¥–∞—é—Ç—å —Ç—ñ–ª—å–∫–∏ –∑–∞ '–ü—Ä–∏–≤—ñ—Ç' ü§ñ",
                "–î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ '–ü—Ä–∏–≤—ñ—Ç' üëã"
            ]
            bot.reply_to(message, random.choice(responses))

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ count_hello: {e}")
        try:
            bot.reply_to(message, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –∞–ª–µ —è –≤—Å–µ —â–µ —Ç—É—Ç! ü§ñ")
        except Exception as ex:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É")

# ======================
# Flask routes
# ======================
@app.route(f"/{API_TOKEN}", methods=["POST"])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram"""
    try:
        json_str = request.get_data().decode("utf-8")
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ webhook: {json_str[:200]}...")

        update = telebot.types.Update.de_json(json.loads(json_str))
        bot.process_new_updates([update])

        logger.info("Webhook —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
        return "OK", 200
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ webhook: {e}")
        return "Error", 500

@app.route("/", methods=["GET"])
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É"""
    return "ü§ñ Telegram Bot is running! üöÄ", 200

@app.route("/health", methods=["GET"])
def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    return {"status": "healthy", "bot_token": "configured" if API_TOKEN else "missing"}, 200

@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è)"""
    try:
        webhook_url = f"https://{request.host}/{API_TOKEN}"
        result = bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
        return f"Webhook set: {result}", 200
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")
        return f"Error: {e}", 500

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"API_TOKEN –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {'–¢–∞–∫' if API_TOKEN else '–ù—ñ'}")

    port = int(os.environ.get("PORT", 5000))
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    app.run(host="0.0.0.0", port=port, debug=False)
