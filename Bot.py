import os
import telebot
from flask import Flask, request
import logging
import random
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∑ Environment Variables
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    logger.error("API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    exit(1)

bot = telebot.TeleBot(API_TOKEN)

# Flask –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app = Flask(__name__)

# –õ–æ–∫–∞–ª—å–Ω–∞ –±–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ {user_id: {"username": ..., "points": ...}}
users = {}

# –ù–∞–≥–æ—Ä–æ–¥–∏
REWARD_THRESHOLDS = {
    10: "ü•â –ë—Ä–æ–Ω–∑–æ–≤–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞!",
    25: "ü•à –°—Ä—ñ–±–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞!",
    50: "ü•á –ó–æ–ª–æ—Ç–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞!",
    100: "üèÜ –ü–ª–∞—Ç–∏–Ω–æ–≤–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞!"
}

def add_points(user_id, username, points_to_add):
    """–î–æ–¥–∞—î –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —É –ª–æ–∫–∞–ª—å–Ω—É –±–∞–∑—É"""
    user = users.get(user_id, {"username": username, "points": 0})
    user["points"] += points_to_add
    user["username"] = username
    users[user_id] = user
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} ({user_id}) –æ—Ç—Ä–∏–º–∞–≤ {points_to_add} –±–∞–ª—ñ–≤. –ó–∞–≥–∞–ª–æ–º: {user['points']}")
    return user["points"]

def get_user_points(user_id):
    """–û—Ç—Ä–∏–º—É—î –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return users.get(user_id, {}).get("points", 0)

def check_rewards(points):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–≥–æ—Ä–æ–¥–∏"""
    rewards = []
    for threshold, reward in REWARD_THRESHOLDS.items():
        if points == threshold:
            rewards.append(reward)
    return rewards

# ======================
# –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
# ======================
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        welcome_text = ("–í—ñ—Ç–∞—é! ü§ñ\n\n"
                        "–ù–∞–ø–∏—à–∏ '–ü—Ä–∏–≤—ñ—Ç' —ñ –æ—Ç—Ä–∏–º—É–π –±–∞–ª–∏.\n"
                        "–ü–µ—Ä–µ–≤—ñ—Ä –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥–æ—é /score.\n\n"
                        "–£–¥–∞—á—ñ! üçÄ")
        bot.reply_to(message, welcome_text)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_welcome: {e}")

@bot.message_handler(commands=['score'])
def send_score(message):
    try:
        user_id = message.from_user.id
        points = get_user_points(user_id)
        username = message.from_user.username or message.from_user.first_name
        score_text = f"üë§ {username}\nüí∞ –£ –≤–∞—Å {points} –±–∞–ª—ñ–≤."
        bot.reply_to(message, score_text)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_score: {e}")

@bot.message_handler(func=lambda message: True, content_types=['text'])
def count_hello(message):
    try:
        text = message.text if message.text else ""
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} ({user_id}): {text[:50]}...")

        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–ª–æ–≤–∞ "–ø—Ä–∏–≤—ñ—Ç" (—Ç–∞ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏)
        text_lower = text.lower()
        greetings = ["–ø—Ä–∏–≤—ñ—Ç", "–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "hey"]
        count = sum(text_lower.count(g) for g in greetings)

        if count > 0:
            points = add_points(user_id, username, count)
            rewards = check_rewards(points)

            reply = f"üéâ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {count} –±–∞–ª(—ñ–≤)!\nüí∞ –ó–∞–≥–∞–ª–æ–º —É –≤–∞—Å {points} –±–∞–ª—ñ–≤."
            if rewards:
                reply += "\n\nüèÖ " + "\nüèÖ ".join(rewards)

            bot.reply_to(message, reply)
        else:
            responses = [
                "–¶—ñ–∫–∞–≤–æ! –ù–∞–ø–∏—à—ñ—Ç—å '–ü—Ä–∏–≤—ñ—Ç', —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∏! üòä",
                "–Ø —Ä–æ–∑—É–º—ñ—é! –ê–ª–µ –±–∞–ª–∏ –¥–∞—é—Ç—å —Ç—ñ–ª—å–∫–∏ –∑–∞ '–ü—Ä–∏–≤—ñ—Ç' ü§ñ",
                "–î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ '–ü—Ä–∏–≤—ñ—Ç' üëã"
            ]
            bot.reply_to(message, random.choice(responses))

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ count_hello: {e}")

# ======================
# Flask routes
# ======================
@app.route(f"/{API_TOKEN}", methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ webhook: {json_str[:200]}...")

        update = telebot.types.Update.de_json(json.loads(json_str))
        bot.process_new_updates([update])

        logger.info("Webhook —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
        return "OK", 200
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ webhook: {e}")
        return "Error", 500

@app.route("/", methods=["GET"])
def index():
    return "ü§ñ Telegram Bot is running! üöÄ", 200

@app.route("/health", methods=["GET"])
def health_check():
    return {"status": "healthy", "bot_token": "configured" if API_TOKEN else "missing"}, 200

@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    try:
        webhook_url = f"https://{request.host}/{API_TOKEN}"
        result = bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
        return f"Webhook set: {result}", 200
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")
        return f"Error: {e}", 500

if __name__ == "__main__":
    print("üöÄ BOT SCRIPT STARTED")
    logger.info(f"API_TOKEN –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {'–¢–∞–∫' if API_TOKEN else '–ù—ñ'}")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
